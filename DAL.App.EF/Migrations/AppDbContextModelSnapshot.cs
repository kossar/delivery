// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.App.AppLangString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LangStrings");
                });

            modelBuilder.Entity("Domain.App.AppTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("LangStringId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangStringId");

                    b.HasIndex("Culture", "LangStringId")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Domain.App.Dimensions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Height")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Width")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("Domain.App.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.App.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.App.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Domain.App.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.HasIndex("LocationInfoId")
                        .IsUnique()
                        .HasFilter("[LocationInfoId] IS NOT NULL");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.App.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParcelInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportNeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("ParcelInfoId")
                        .IsUnique()
                        .HasFilter("[ParcelInfoId] IS NOT NULL");

                    b.HasIndex("TransportNeedId");

                    b.HasIndex("UnitId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("Domain.App.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DimensionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoadCapacity")
                        .HasColumnType("int");

                    b.Property<string>("RegNr")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("UnitId");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("Domain.App.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PickUpLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransportNeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransportStatus")
                        .HasColumnType("int");

                    b.Property<bool>("UpdatedByTransportOffer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PickUpLocationId");

                    b.HasIndex("TransportNeedId");

                    b.HasIndex("TransportOfferId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("Domain.App.TransportMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DestinationLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("StartLocationId");

                    b.ToTable("TransportMetas");
                });

            modelBuilder.Entity("Domain.App.TransportNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonCount")
                        .HasColumnType("int");

                    b.Property<Guid>("TransportMetaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportNeedInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TransportMetaId")
                        .IsUnique();

                    b.HasIndex("TransportNeedInfoId")
                        .IsUnique()
                        .HasFilter("[TransportNeedInfoId] IS NOT NULL");

                    b.ToTable("TransportNeeds");
                });

            modelBuilder.Entity("Domain.App.TransportOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableLoadCapacity")
                        .HasColumnType("int");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportMetaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportOfferInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TransportMetaId")
                        .IsUnique();

                    b.HasIndex("TransportOfferInfoId")
                        .IsUnique()
                        .HasFilter("[TransportOfferInfoId] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TransportOffers");
                });

            modelBuilder.Entity("Domain.App.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitCodeId")
                        .IsUnique();

                    b.HasIndex("UnitNameId")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.App.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MakeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegNr")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MakeId")
                        .IsUnique();

                    b.HasIndex("ModelId")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Domain.App.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForGoods")
                        .HasColumnType("bit");

                    b.Property<Guid>("VehicleTypeNameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeNameId")
                        .IsUnique();

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.App.AppTranslation", b =>
                {
                    b.HasOne("Domain.App.AppLangString", "LangString")
                        .WithMany("Translations")
                        .HasForeignKey("LangStringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LangString");
                });

            modelBuilder.Entity("Domain.App.Dimensions", b =>
                {
                    b.HasOne("Domain.App.Unit", "Unit")
                        .WithMany("Dimensions")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.App.Identity.AppUserRole", b =>
                {
                    b.HasOne("Domain.App.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.App.Location", b =>
                {
                    b.HasOne("Domain.App.AppLangString", "Address")
                        .WithOne("Address")
                        .HasForeignKey("Domain.App.Location", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "City")
                        .WithOne("City")
                        .HasForeignKey("Domain.App.Location", "CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "Country")
                        .WithOne("Country")
                        .HasForeignKey("Domain.App.Location", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "LocationInfo")
                        .WithOne("LocationInfo")
                        .HasForeignKey("Domain.App.Location", "LocationInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("LocationInfo");
                });

            modelBuilder.Entity("Domain.App.Parcel", b =>
                {
                    b.HasOne("Domain.App.Dimensions", "Dimensions")
                        .WithMany("Parcels")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "ParcelInfo")
                        .WithOne("ParcelInfo")
                        .HasForeignKey("Domain.App.Parcel", "ParcelInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.App.TransportNeed", "TransportNeed")
                        .WithMany("Parcels")
                        .HasForeignKey("TransportNeedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Unit", "Unit")
                        .WithMany("Parcels")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("ParcelInfo");

                    b.Navigation("TransportNeed");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.App.Trailer", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", "AppUser")
                        .WithMany("Trailers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Dimensions", "Dimensions")
                        .WithMany("Trailers")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Unit", "Unit")
                        .WithMany("Trailers")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Dimensions");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.App.Transport", b =>
                {
                    b.HasOne("Domain.App.Location", "PickUpLocation")
                        .WithMany("Transports")
                        .HasForeignKey("PickUpLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.TransportNeed", "TransportNeed")
                        .WithMany("Transports")
                        .HasForeignKey("TransportNeedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.TransportOffer", "TransportOffer")
                        .WithMany("Transports")
                        .HasForeignKey("TransportOfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PickUpLocation");

                    b.Navigation("TransportNeed");

                    b.Navigation("TransportOffer");
                });

            modelBuilder.Entity("Domain.App.TransportMeta", b =>
                {
                    b.HasOne("Domain.App.Location", "DestinationLocation")
                        .WithMany("DestinationLocations")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Location", "StartLocation")
                        .WithMany("StartLocations")
                        .HasForeignKey("StartLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationLocation");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("Domain.App.TransportNeed", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", "AppUser")
                        .WithMany("TransportNeeds")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.TransportMeta", "TransportMeta")
                        .WithOne("TransportNeed")
                        .HasForeignKey("Domain.App.TransportNeed", "TransportMetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "TransportNeedInfo")
                        .WithOne("TransportNeedInfo")
                        .HasForeignKey("Domain.App.TransportNeed", "TransportNeedInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("TransportMeta");

                    b.Navigation("TransportNeedInfo");
                });

            modelBuilder.Entity("Domain.App.TransportOffer", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", "AppUser")
                        .WithMany("TransportOffers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.App.TransportMeta", "TransportMeta")
                        .WithOne("TransportOffer")
                        .HasForeignKey("Domain.App.TransportOffer", "TransportMetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "TransportOfferInfo")
                        .WithOne("TransportOfferInfo")
                        .HasForeignKey("Domain.App.TransportOffer", "TransportOfferInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.App.Unit", "Unit")
                        .WithMany("TransportOffers")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Vehicle", "Vehicle")
                        .WithMany("TransportOffers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Trailer");

                    b.Navigation("TransportMeta");

                    b.Navigation("TransportOfferInfo");

                    b.Navigation("Unit");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.App.Unit", b =>
                {
                    b.HasOne("Domain.App.AppLangString", "UnitCode")
                        .WithOne("UnitCode")
                        .HasForeignKey("Domain.App.Unit", "UnitCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "UnitName")
                        .WithOne("UnitName")
                        .HasForeignKey("Domain.App.Unit", "UnitNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitCode");

                    b.Navigation("UnitName");
                });

            modelBuilder.Entity("Domain.App.Vehicle", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", "AppUser")
                        .WithMany("Vehicles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "Make")
                        .WithOne("Make")
                        .HasForeignKey("Domain.App.Vehicle", "MakeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.AppLangString", "Model")
                        .WithOne("Model")
                        .HasForeignKey("Domain.App.Vehicle", "ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.App.Unit", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.App.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.App.VehicleType", b =>
                {
                    b.HasOne("Domain.App.AppLangString", "VehicleTypeName")
                        .WithOne("VehicleTypeName")
                        .HasForeignKey("Domain.App.VehicleType", "VehicleTypeNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleTypeName");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.App.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.App.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.App.AppLangString", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("LocationInfo");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("ParcelInfo");

                    b.Navigation("Translations");

                    b.Navigation("TransportNeedInfo");

                    b.Navigation("TransportOfferInfo");

                    b.Navigation("UnitCode");

                    b.Navigation("UnitName");

                    b.Navigation("VehicleTypeName");
                });

            modelBuilder.Entity("Domain.App.Dimensions", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("Domain.App.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.App.Identity.AppUser", b =>
                {
                    b.Navigation("Trailers");

                    b.Navigation("TransportNeeds");

                    b.Navigation("TransportOffers");

                    b.Navigation("UserRoles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.App.Location", b =>
                {
                    b.Navigation("DestinationLocations");

                    b.Navigation("StartLocations");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Domain.App.TransportMeta", b =>
                {
                    b.Navigation("TransportNeed");

                    b.Navigation("TransportOffer");
                });

            modelBuilder.Entity("Domain.App.TransportNeed", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Domain.App.TransportOffer", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Domain.App.Unit", b =>
                {
                    b.Navigation("Dimensions");

                    b.Navigation("Parcels");

                    b.Navigation("Trailers");

                    b.Navigation("TransportOffers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.App.Vehicle", b =>
                {
                    b.Navigation("TransportOffers");
                });

            modelBuilder.Entity("Domain.App.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
